/*
 * @(#) $RCSfile: JSFormula.java,v $ $Revision: 1.9 $ $Date: 2003/07/28 15:07:16 $ $Name: TableView1_2 $
 *
 * Center for Computational Genomics and Bioinformatics
 * Academic Health Center, University of Minnesota
 * Copyright (c) 2000-2002. The Regents of the University of Minnesota  
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * see: http://www.gnu.org/copyleft/gpl.html
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 */


package edu.umn.genomics.table;

import java.io.Serializable;
import java.util.*;
import javax.swing.event.*;
import javax.swing.table.*;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.*;
import org.mozilla.javascript.optimizer.*;

/**
 * JSFormula provides JavaScript formulas from tables.
 * JSFormula uses embedded JavaScript from Mozilla rhino package:
 *   http://www.mozilla.org/rhino/doc.html
 * 
 * A formula is compiled as a JavaScript function.  
 * Three variables are provided to the formula:
 * <UL>
 *  <LI><b> table </b> - the TableModel on which this formula operates </LI>
 *  <LI><b> row   </b> - the row of the cell in the table (row starts from 0) </LI>
 *  <LI><b> col   </b> - the column of the cell in the table (col starts from 0) </LI>
 * </UL>
 * The formula needs to return a value.  
 * Example formulas:
 * <UL>
 * <LI><PRE><CODE>
 *    // return column 1 - column 0
 *    return table.getValueAt(row, 1) - table.getValueAt(row, 0)
 * </CODE></PRE></LI>
 * <LI><PRE><CODE>
 *    // return column 1 - column 0 with max number of decimal places
 *    var dp = 10000; // set number of decimal places
 *    return Number(Math.round(
 *       dp*(table.getValueAt(row,1)-table.getValueAt(row,0)))/dp);
 * </CODE></PRE></LI>
 * <LI><PRE><CODE>
 *    // return the sin of column 0
 *    return Math.sin(table.getValueAt(row, 0))
 * </CODE></PRE></LI>
 * <LI><PRE><CODE>
 *    // return the sum of the preceeding columns
 *    var sum = 0.;
 *    for (var c = 0; c < col; c++) {
 *      var v = table.getValueAt(row,c);
 *      if (v instanceof Number) {
 *        sum += v.doubleValue();
 *      }
 *    }
 *    return sum;
 * </CODE></PRE></LI>
 * </UL>
 * 
 * @author       J Johnson
 * @version $Revision: 1.9 $ $Date: 2003/07/28 15:07:16 $  $Name: TableView1_2 $ 
 * @since        1.0
 * @see  javax.swing.table.TableModel 
 * @see  javax.swing.ListSelectionModel
 * @see  Cells
 */
public class JSFormula implements Serializable, TableModelFormula {
  static Scriptable sharedScope = null;
  static int refCnt = 0;
  String name = null;
  TableModel tm;
  String script = "";
  Scriptable myScope = null;
  Function func = null; 
  /**
   *  This holds a list of cells visited during a getValueAt() call 
   *  it is used to prevent infinite recursion by self reference.
   *  No attempt has been made to make this Thread safe.
   */
  private Vector path = new Vector();

  private Scriptable getSharedScope() {
    if (sharedScope == null) {
      Context cx = Context.enter();
      try {
        cx.setCompileFunctionsWithDynamicScope(true);
        sharedScope = cx.initStandardObjects(null);
        /* This is deprecated in rhino:
        ImporterTopLevel itl = new ImporterTopLevel(cx);
        NativeJavaPackage[] njp = new NativeJavaPackage[1];
        njp[0] = new NativeJavaPackage("edu.umn.genomics.table");
        itl.importPackage(cx, sharedScope, njp,  null);
        */
      } catch (Exception ex1) {
        ex1.printStackTrace();
      } finally {
        cx.exit();
      }
    }
    return sharedScope;
  }
  public JSFormula() {
  }
  public JSFormula(TableModel tableModel) {
    setTableModel(tableModel);
  }
  public JSFormula(String name, TableModel tableModel) {
    setName(name);
    setTableModel(tableModel);
  }
  public JSFormula(String name, TableModel tableModel, String formula) {
    setName(name);
    setTableModel(tableModel);
    setFormula(formula);
  }
  public void setName(String name) {
    this.name = name;
  }
  public String getName() {
    return name != null ? name : script != null ? script : "";
  }
  public void setTableModel(TableModel tableModel) {
    this.tm = tableModel;
  }
  public TableModel getTableModel() {
    return tm;
  }
  public String getFormula() {
    return script;
  }
  public void setFormula(String formula) {
    this.script = formula;
    func = null;
  }
  public void recalculate() {
    func = null;
  }
  public Object getValueAt(int rowIndex, int columnIndex) {
    Object result = null;
    Context cx = Context.enter();
    cx.setOptimizationLevel(9);
    Object[] args = new Object[2];
    args[0] = new Integer(rowIndex);
    args[1] = new Integer(columnIndex);
    try {
      if (myScope == null || func == null) {
        myScope = cx.newObject(getSharedScope());
        myScope.setPrototype(getSharedScope());
        myScope.setParentScope(null);
        myScope.put("table", myScope, tm);
        myScope.put("Cells", myScope, new Cells());
        String source = "function calcCell(row,col) { " + script + "}";
        // This no longer works with current rhino release:
        // func = cx.compileFunction(myScope, source, null, 0, null);
        // So now do this instead:
        cx.evaluateString(myScope,source,"function definition",1,null);
        Object f = myScope.get("calcCell",myScope);
        func = (Function)f;
      }
      String cell = "r" + rowIndex + "c" + columnIndex;
      if (path.contains(cell)) {
        result = null;  // recursion
      } else {
        path.addElement(cell);
        result = func.call(cx, func.getParentScope(), func, args);
        path.removeElement(cell);
        if (result instanceof NativeJavaObject) {
          result = ((NativeJavaObject)result).unwrap(); 
        }
      }
    } catch (WrappedException we) {
      result = we;
      // System.err.println("JSFormula " + we);
    } catch (EvaluatorException eve) {
      result = eve;
      // System.err.println("JSFormula " + eve);
    } catch (JavaScriptException jse) {
      result = jse;
      // System.err.println("JSFormula " + jse);
    } catch (EcmaError ee) {
      result = ee;
      // System.err.println("JSFormula " + ee);
    } catch (Exception ex) {
      result = ex;
      // System.err.println("JSFormula " + ex.getClass() + " " + ex);
      ex.printStackTrace();
    } finally {
      Context.exit();
    }
    return result;
  }

  public boolean isCellEditable(int rowIndex, int columnIndex) {
    return false;
  }
  public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
  }

  public static int getColumnByName(TableModel tm, String name) {
    if (tm != null && name != null) {
      int cc = tm.getColumnCount();
      for(int i = 0; i < cc; i++) {
        if (name.equals(tm.getColumnName(i)))
          return i;
      }
      for(int i = 0; i < cc; i++) {
        if (name.equalsIgnoreCase(tm.getColumnName(i)))
          return i;
      }
    }
System.err.println("getColumnByName " + tm + " name " + name);
    return -1;
  }

  public String toString() {
    return getName();
  }

  
  public static String helpString = "" 
    + " A formula is compiled as a JavaScript function. \n"
    + " For more information see:  http://www.mozilla.org/rhino/doc.html \n"
    + "\n"
    + " Four variables are provided to the formula: \n"
    + "   table - the javax.swing.table.TableModel on which this formula operates \n"
    + "   row - the row of the cell in the table (row starts from 0) \n"
    + "   col - the column of the cell in the table (col starts from 0) \n"
    + "   Cells - the Cells class that has a number of useful static methods. \n"
    + "\n"
    + " The formula needs to return a value. \n"
    + " So each formula must include the JavaScript keyword: return \n"
    + "\n"
    + " JavaScript forces most numbers to be treated as text strings, \n "
    + " so use the JavaScript Number() function to return a Java Number.\n"
    + " For example  in a table row:  \n"
    + "     1.2     .9  \n"
    + "   return table.getValueAt(row, 0) + table.getValueAt(row, 1)  \n "
    + "   returns a concatenated text String:  1.2.9 \n"
    + " While\n"
    + "   return Number(table.getValueAt(row, 0)) + Number(table.getValueAt(row, 1))  \n "
    + "   returns a Number:  2.1 \n"
    + "\n"
    + "\n"
    + " The Cells class provides a means to get a collection of table cells. "
    + " (Cells uses java.util.Collection interface for Java2, "
    + "  for JDK1.1 it uses java.util.Vector only.) \n"
    + " Cells provides the following static methods:\n"
    + "  Vector getValuesFrom(TableModel tableModel, int from_row, int from_col, int to_row, int to_col)\n"
    + "  \tReturn a list of cells from a rectangular portion of the table.\n"
    + "  Object min(Collection cells)\n"
    + "  \tReturn the cell with minimum value of the cells in the list.\n"
    + "  Object max(Collection cells)\n"
    + "  \tReturn the cell with maximum value of the cells in the list.\n"
    + "  Object median(Collection cells)\n"
    + "  \tReturn the median value of all Number-typed cells in the list.\n"
    + "  double sum(Collection cells)\n"
    + "  \tReturn the sum of all Number-typed cells in the list of cells.\n"
    + "  double average(Collection cells)\n"
    + "  \tReturn the average mean value of all Number-typed cells in the list.\n"
    + "  double variance(Collection cells)\n"
    + "  \tReturn the variance of all Number-typed cells in the list.\n"
    + "  double stddev(Collection cells)\n"
    + "  \tReturn the standard deviation of all Number-typed cells in the list.\n"
    + "  int count(Collection cells)\n"
    + "  \tReturn the count of cells in the list.\n"
    + "  int count(Collection cells, Object obj)\n"
    + "  \tReturn the number of times the given obj appears among the cells in the list.\n"
    + "  int count(Collection cells, Class javaClass)\n"
    + "  \tReturn the number of cells in the list are of the given java class.\n"
    + "  Set distinct(Collection cells)\n"
    + "  \tReturn the set of distinct cells in the list with duplicates removed.\n"
    + "  List sort(Collection cells)\n"
    + "  \tSort the cells in place.  \n"
    + "  List reverse(Collection cells)\n"
    + "  \tReverse the order of the cells in place.  \n"
    + "  List fill(Collection cells, Object obj)\n"
    + "  \tFill the list with the given obj.  \n"
    + "  List getCommonClasses(Collection collection)\n"
    + "  \tReturn a list of java Classes that all cells in the list belong to.\n"
    + "  Class getCommonClass(Collection collection)\n"
    + "  \tReturn the most specific java Class that all cells in the list belong to.\n"
    + "  Set getCommonInterfaces(Collection collection)\n"
    + "  \tReturn a list of java interfaces that all cells in the list implement.\n"
    + "\n"
    + "\n"
    + " Example formulas: \n"
    + "\n"
    + "//Example 1\n"
    + "   // return column 1 - column 0 \n"
    + "   return Number(table.getValueAt(row, 1) - table.getValueAt(row, 0)) \n"
    + "\n"
    + "//Example 2\n"
    + "   // return column 1 - column 0 with max number of decimal places \n"
    + "   var dp = 10000; // set number of decimal places \n"
    + "   return Number(Math.round( \n"
    + "       dp*(table.getValueAt(row,1)-table.getValueAt(row,0)))/dp); \n"
    + "  Example 3\n"
    + "\n"
    + "   // return the sin of column 0 \n"
    + "   return Math.sin(table.getValueAt(row, 0)) \n"
    + "\n"
    + "//Example 4\n"
    + "   // average the values in a range of rows \n"
    + "   return Cells.average(Cells.getValuesFrom(table,row-1,col-1,row+1,col-1)); \n"
    + "\n"
    + "//Example 5\n"
    + "  // return the sum of the preceeding columns \n"
    + "  var sum = 0.; \n"
    + "  for (var c = 0; c < col; c++) { \n"
    + "    var v = table.getValueAt(row,c); \n"
    + "    if (v instanceof Number) { \n"
    + "      sum += v.doubleValue(); \n"
    + "    } \n"
    + "  } \n"
    + "  return sum; \n"
    + "\n";
  public static String getHelpString() {
    return helpString;
  } 
}
