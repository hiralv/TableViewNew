/*
 * @(#) $RCSfile$ $Revision$ $Date$ $Name$
 *
 * Center for Computational Genomics and Bioinformatics
 * Academic Health Center, University of Minnesota
 * Copyright (c) 2000-2002. The Regents of the University of Minnesota  
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * see: http://www.gnu.org/copyleft/gpl.html
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 */


package edu.umn.genomics.table;

import java.io.Serializable;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;

/**
 * HistogramView displays a scatter plot of the two selected columns
 * of the table.
 * @author       J Johnson
 * @version $Revision$ $Date$  $Name$ 
 * @since        1.0
 * @see  ColumnMap
 * @see  TableContext
 * @see  javax.swing.table.TableModel
 * @see  javax.swing.ListSelectionModel
 */
public class HistogramView extends AbstractTableModelView
             implements Serializable {

  DefaultHistogramModel hgm = new DefaultHistogramModel();
  DefaultComboBoxModel xModel = new DefaultComboBoxModel();
  DefaultComboBoxModel yModel = new DefaultComboBoxModel();
  JComboBox xChoice = new JComboBox(xModel); 
  JComboBox yChoice = new JComboBox(yModel); 
  JToolBar top = new JToolBar();
  JPanel plotPanel = new JPanel(new BorderLayout());
  HistogramDisplay plot = null;
  boolean residuals = false;
  int prevSetOp = -1;
  int[] pendingCols = null;

  HistogramListener hl = new HistogramListener() {
   /**
    * The method called when a HistogramModel is changed.
    * @param e the HistogramEvent.
    */
    public void histogramChanged(HistogramEvent e) {
      if (!e.isAdjusting()) {
        updateHistogram();
      }
    }
  };

  private MouseAdapter ma = new MouseAdapter() {
    public void mousePressed(MouseEvent e) {
      if (ctx != null) {
        prevSetOp = ctx.getSetOperator(tm).getSetOperator();
        ctx.getSetOperator(tm).setFromInputEventMask(e.getModifiers());
      }
    }
    public void mouseReleased(MouseEvent e) {
      if (ctx != null) {
        ctx.getSetOperator(tm).setSetOperator(prevSetOp);
      }
    }
  };

  /**
   * Constructs a view display.  Nothing will be displayed 
   * until a data model is set.
   * @see #setTableModel(TableModel tableModel)
   */
  public HistogramView() {
    super();
    init();
  }

  /**
   * Constructs a view  display which is initialized with 
   * tableModel as the data model, and a default selection model.
   * @param tableModel the data model for the parallel coordinate display
   */
  public HistogramView(TableModel tableModel) {
    super(tableModel);
    init();
  }

  /**
   * Constructs a view  display which is initialized with 
   * tableModel as the data model, and the given selection model.
   * @param tableModel the data model for the parallel coordinate display
   * @param lsm  the ListSelectionModel for the parallel coordinate display
   */
  public HistogramView(TableModel tableModel, ListSelectionModel lsm) {
    super(tableModel, lsm);
    init();
  }

  
  /**
   * Sets tableModel as the data model.
   * @param tableModel the data model for the parallel coordinate display
   */
  public void setTableModel(TableModel tableModel) {
    super.setTableModel(tableModel);
    if (hgm != null) {
      hgm.setDataModel(tableModel);
    }
    updateColumns();
  }

  /**
   * Sets the row selection model for this table to newModel and registers
   * with for listener notifications from the new selection model.
   * @param newModel the new selection model
   */
  public void setSelectionModel(ListSelectionModel newModel) {
    super.setSelectionModel(newModel);
    if (hgm != null) {
      hgm.setListSelectionModel(newModel);
    }
  }

  /**
   *
   */
  private void init() {
    setLayout(new BorderLayout());

    top.add(new JLabel("X: "));
    top.add(xChoice);
    top.add(new JLabel("Y: "));
    top.add(yChoice);

    JButton btn = new JButton("Edit");
    btn.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
         editBinModels();
       }
    });
    top.add(btn);

    btn = new JButton("Plot");
    btn.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
         setColumns();
       }
    });
    top.add(btn);

    add(top,BorderLayout.NORTH);
    plot = ctx != null ? new HistogramDisplay(hgm,ctx.getSetOperator(tm)) 
                       : new HistogramDisplay(hgm);
    plotPanel.add(plot); 
    add(plotPanel);
    xChoice.setToolTipText("Select column for X axis");
    yChoice.setToolTipText("Select column for Y axis");
    btn.setToolTipText("Plot the selected columns");
    updateColumns();
    hgm.addHistogramListener(hl);
  }

  JDialog editorFrame;
  Box editorPanel = new Box(BoxLayout.Y_AXIS);
  private void editBinModels() {
    java.util.List binModelList = hgm.getBinModelList();
    Component[] comp = editorPanel.getComponents();
    for (int i = 0; i < comp.length; i++) {
      BinModel bm = ((BinModelEditor)comp[i]).getBinModel();
      if (binModelList.contains(bm)) {
        binModelList.remove(bm);
      } else {
        editorPanel.remove(comp[i]);
      }
    }
    for (int i = 0; i < binModelList.size(); i++) {
      ColumnMapBinModel bm = (ColumnMapBinModel)binModelList.get(i);
      BinModelEditor bme = new BinModelEditor(bm);
      editorPanel.add(bme);
    }
    if (editorFrame == null) {
      editorFrame = new JDialog((JFrame)this.getTopLevelAncestor(),"Edit Histogram");
      editorFrame.getContentPane().add(new JScrollPane(editorPanel));
    }
    editorFrame.pack();
    editorFrame.setVisible(true);
  }

  private synchronized void updateHistogram() {
    int max = hgm.getMaxBinSize();
    int cnt = hgm.getBinCount();
    int nMod = hgm.getModelCount();
    int[] dim = hgm.getDimensions();
    int[] indices = new int[dim.length];
    for (int i = 0; i < cnt; i++) {
      // incr indices 
      int binCnt = hgm.getBinCount(indices);
      int selCnt = hgm.getBinSelectCount(indices);
    }
    if (editorFrame != null && editorFrame.isVisible()) {
      editBinModels();
    }
  }

  private synchronized void updateColumns() {
    if (tm != null) {
      boolean needUpdate = xModel.getSize() != tm.getColumnCount();
      if (!needUpdate) {
        int ncols = tm.getColumnCount();
        for (int c = 0; !needUpdate && c < ncols; c++) {
          String name = tm.getColumnName(c);
          String lbl =  (String)xModel.getElementAt(c);
          if (name != null) {
            if (name.equals(lbl)) {
              needUpdate = true;
            }
          } else if (lbl != null) {
            needUpdate = true;
          }
        }
      }
      if (needUpdate) {
        try {
          xModel.removeAllElements(); 
          //yModel.removeAllElements(); 
          int ncols = tm.getColumnCount();
          for (int c = 0; c < ncols; c++) {
            String name = tm.getColumnName(c);
            xModel.addElement(name);
            //yModel.addElement(name);
          }
          //plotPanel.removeAll();
          plotPanel.invalidate();
          if (pendingCols != null) {
            setColumns(pendingCols);
          }
          validate();
          repaint();
        } catch (Exception ex) {
        }
      }
    }
  }

  private void setColumns() {
    if (ctx != null && plotPanel != null) {
      try {
        ColumnMap xMap = ctx.getColumnMap(tm,xChoice.getSelectedIndex());  
        if (xMap != null) {
          hgm.setBinModel(0,new ColumnMapBinModel(xMap));
        }
      } catch (Exception ex) {
        System.err.println("HistogramView.setColumns() " + ex);
        ex.printStackTrace();
      }
      repaint();
    }
  }
  
  /**
   * Set the view to display the columns at the TableModel columns indices  
   * (numbered from 0 to number of columns - 1).
   * @param columns the indices of the columns to display.
   */
  public void setColumns(int[] columns) {
    pendingCols = columns;
    for (int i = 0; i < columns.length; i++) {
      try {
        ColumnMap xMap = ctx.getColumnMap(tm,columns[i]);  
        if (xMap != null) {
          hgm.setBinModel(i,new ColumnMapBinModel(xMap));
        }
      } catch (Exception ex) {
        System.err.println("HistogramView.setColumns() " + ex);
        ex.printStackTrace();
      }
    }
  }

  /**
   * Set the TableContext that manages TableModels and Views.
   * @param ctx The context to use for TableModels and Views.
   */
  public void setTableContext(TableContext ctx) {
    super.setTableContext(ctx);
    if (plot != null) {
      plot.setSetOperator(ctx.getSetOperator(tm));
    }
  }


  /** 
   * Get the component displaying the table data in this view.
   * @return the component displaying the table data.
   */
  public Component getCanvas() {
    return plotPanel;
  }

  /**
   * The TableModelEvent should be constructed in the coordinate system of
   * the model.
   * @param e the change to the data model
   */
  public void tableChanged(TableModelEvent e) {
    //if (tcm == null)
      //return;
    if (e == null || e.getFirstRow() == TableModelEvent.HEADER_ROW) {
      updateColumns();
    }
  }

  /**
   * Returns the preferred size of this view.
   * @return an instance of Dimension that represents 
   *  the preferred size of this view.
   */
  public Dimension getPreferredSize() {
    Dimension dim = super.getPreferredSize();
    Dimension topdim = top.getPreferredSize();
    dim.height = topdim.height + dim.width;
    return dim; 
  }

  protected void finalize() throws Throwable {
    cleanUp();
    super.finalize();
  }

  /**
   *  This removes this view as a listener to the TableModel
   *  and to the ListSelectionModel.  Classes overriding this
   *  method should call super.cleanUp();
   */
  public void cleanUp() {
    if (plot != null) {
      // plot.cleanUp();
    }
    super.cleanUp();
  }

}
