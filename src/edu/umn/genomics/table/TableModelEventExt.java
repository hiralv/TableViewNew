/*
 * @(#) $RCSfile: BinModelEvent.java,v $ $Revision: 1.1 $ $Date: 2004/08/02 20:23:38 $ $Name: TableView1_3 $
 *
 * Center for Computational Genomics and Bioinformatics
 * Academic Health Center, University of Minnesota
 * Copyright (c) 2000-2002. The Regents of the University of Minnesota
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * see: http://www.gnu.org/copyleft/gpl.html
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

package edu.umn.genomics.table;

import java.io.Serializable;
import java.util.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;

/**
 * An event generated by a change to a TableModel.
 * @author       J Johnson
 * @version      %I%, %G%
 * @since        1.0
 */
public class TableModelEventExt extends TableModelEvent {
    // added types
    public final static int REORDER = -2;
    public final static int NAMES = -3;
    //
    protected boolean   columnEvent = false;
    protected int       firstCol = -1;
    protected int       lastCol = -1;
    protected int[]     columnIndex = null; 
   

/*
  Column	row1		row2		type
  		HEADER_ROW
   						INSERT
   						DELETE
   						UPDATE

*/

  
//
// Constructors
//

    /**
     *  All row data in the table has changed, listeners should discard any state
     *  that was based on the rows and requery the <code>TableModel</code>
     *  to get the new row count and all the appropriate values.
     *  The <code>JTable</code> will repaint the entire visible region on
     *  receiving this event, querying the model for the cell values that are visible.
     *  The structure of the table ie, the column names, types and order
     *  have not changed.
     */
    public TableModelEventExt(TableModel source) {
        super(source);
    }

    /**
     *  This row of data has been updated.
     *  To denote the arrival of a completely new table with a different structure
     *  use <code>HEADER_ROW</code> as the value for the <code>row</code>.
     *  When the <code>JTable</code> receives this event and its
     *  <code>autoCreateColumnsFromModel</code>
     *  flag is set it discards any TableColumns that it had and reallocates
     *  default ones in the order they appear in the model. This is the
     *  same as calling <code>setModel(TableModel)</code> on the <code>JTable</code>.
     */
    public TableModelEventExt(TableModel source, int row) {
        super(source, row);
    }

    /**
     *  The data in rows [<I>firstRow</I>, <I>lastRow</I>] have been updated.
     */
    public TableModelEventExt(TableModel source, int firstRow, int lastRow) {
        super(source, firstRow, lastRow);
    }

    /**
     *  The cells in column <I>column</I> in the range
     *  [<I>firstRow</I>, <I>lastRow</I>] have been updated.
     */
    public TableModelEventExt(TableModel source, int firstRow, int lastRow, int column) {
        super(source, firstRow, lastRow, column);
    }

    /**
     *  The cells from (firstRow, column) to (lastRow, column) have been changed.
     *  The <I>column</I> refers to the column index of the cell in the model's
     *  co-ordinate system. When <I>column</I> is ALL_COLUMNS, all cells in the
     *  specified range of rows are considered changed.
     *  <p>
     *  The <I>type</I> should be one of: INSERT, UPDATE and DELETE.
     */
    public TableModelEventExt(TableModel source, int firstRow, int lastRow, int column, int type) {
        super(source, firstRow, lastRow, column, type);
    }
    

    /**
     * The name of the table has changed.
     * @param source The TableModel that has changed
     * @param name The new name for the table.
     */
    // public TableModelEventExt(TableModel source, String name) {
    // }

    /**
     * The name of a table column has changed.
     * @param source The TableModel that has changed
     * @param name The table column with a new name.
     * @param name The new name for the table column.
     */
    // public TableModelEventExt(TableModel source, int column, String name) {
    // }

    /**
     * Columns have been added, deleted, or rearranged in the TableModel.
     * The <I>type</I> should be one of: INSERT, UPDATE and DELETE.
     * @param source The TableModel that has changed
     * @param firstCol The first index in the original TableModel at which a column changed.
     * @param lastCol The last index in the original TableModel at which a column changed.
     * @param type The type of change: INSERT, DELETE, UPDATE
     * @param columnIndices For an UPDATE, the array contains the previous index at that location.
     */
/*
    public TableModelEventExt(TableModel source, int[] rowIndices) {
        super(source, HEADER_ROW);
        this.type = type;
        this.firstCol = Math.min(firstCol,lastCol);
        this.lastCol = Math.max(firstCol,lastCol);
        this.columnIndex = rowIndices;
        this.columnEvent = true;
    }
*/

    // public TableModelEventExt(TableModel source, int firstCol, int lastCol, int type, int[] columnIndices) {
    // INSERT {0,1,2,3,4} {0,1,-1,2,3,4}
    // DELETE {0,1,2,3,4} {0,1,3,4}
    // UPDATE {0,1,2,3,4} {0,1,3,2,4}
    /**
     * Columns have been added, deleted, or rearranged in the TableModel.
     * The <I>type</I> should be one of: INSERT, UPDATE and DELETE.
     * @param source The TableModel that has changed
     * @param firstCol The first index in the original TableModel at which a column changed.
     * @param lastCol The last index in the original TableModel at which a column changed.
     * @param type The type of change: INSERT, DELETE, UPDATE
     * @param columnIndices For an UPDATE, the array contains the previous index at that location.
     */
    public TableModelEventExt(TableModel source, int firstCol, int lastCol, int type, int[] columnIndices) {
        super(source, HEADER_ROW);
        this.type = type;
        this.firstCol = Math.min(firstCol,lastCol);
        this.lastCol = Math.max(firstCol,lastCol);
        this.columnIndex = columnIndices;
        this.columnEvent = true;
    }

    /**
     * Return whether this is a Column INSERT,DELETE, or UPDATE event,
     * which can be retrieved by methods getNewColumnIndex or getOldColumnIndex.
     * @return True if this is a Column INSERT,DELETE, or UPDATE event.
     */
    public boolean isColumnEvent() {
      return columnEvent;
    }

    /**
     * Return the new index of a column in the TableModel, or -1 if the 
     * column is no longer in the TableModel. 
     * @param oldColumnIndex The index of a column before the event.
     * @return The index after the Column Event.
     */
    public int getNewColumnIndex(int oldColumnIndex) {
      return type == UPDATE 
             ? oldColumnIndex >= firstCol && oldColumnIndex <= lastCol
               ? columnIndex[oldColumnIndex - firstCol]
               : oldColumnIndex
             : oldColumnIndex < firstCol 
               ? oldColumnIndex 
               : type == INSERT 
                 ? oldColumnIndex + ( Math.abs(lastCol - firstCol)+1)
                 : type == DELETE && oldColumnIndex > lastCol 
                   ? oldColumnIndex - (Math.abs(lastCol - firstCol)+1)
                   : -1;
    }

    /**
     * Return the old index of a column in the TableModel prior to the change, 
     * or -1 if the column wasn't previously in the TableModel. 
     * @param newColumnIndex The index of a column before the event.
     * @return The index after the Column Event.
     */
    public int getOldColumnIndex(int newColumnIndex) {
      return type == UPDATE 
             ? newColumnIndex >= firstCol && newColumnIndex <= lastCol
               ? columnIndex[newColumnIndex - firstCol]
               : newColumnIndex
             : newColumnIndex < firstCol 
               ? newColumnIndex
               : type == INSERT 
                 ? newColumnIndex >= firstCol && newColumnIndex <= lastCol
                   ? -1 
                   : newColumnIndex - (Math.abs(lastCol - firstCol)+1)
                 : newColumnIndex + (Math.abs(lastCol - firstCol)+1);
    }

    /** Returns the index of the first Column that changed.  */
    public int getFirstCol() { return firstCol; };

    /** Returns the index of the last Column that changed.  */
    public int getLastCol() { return lastCol; };


}
