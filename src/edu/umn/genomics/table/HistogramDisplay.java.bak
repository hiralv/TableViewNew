/*
 * @(#) $RCSfile$ $Revision$ $Date$ $Name$
 *
 * Center for Computational Genomics and Bioinformatics
 * Academic Health Center, University of Minnesota
 * Copyright (c) 2000-2002. The Regents of the University of Minnesota
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * see: http://www.gnu.org/copyleft/gpl.html
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */


package edu.umn.genomics.table;
import java.io.Serializable;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;
import edu.umn.genomics.graph.*;
import edu.umn.genomics.graph.swing.*;

public class HistogramDisplay extends JPanel {
  HistogramModel hgm;
  int barWidth = 1;
  SimpleGraph graph;
  // Selection 
  boolean selecting = false;
  Point start = null;
  Point current = null;
  // Histogram bars
  //GraphSegments gCntLine;
  //GraphSegments gSelLine;
  GraphRects gCntRect;
  GraphRects gSelRect;
  Axis calcAxes[] = new Axis[2];
  int[][] binRectPnts;
  int[][] selRectPnts;
    /**
     * Return arrays of the x pixel location and the y pixel location.
     * @param x the x pixel offset
     * @param y the y pixel offset
     * @param axes the axes that transform the datapoints to the pixel area
     * @param points the array of points: xpoints, ypoints
     * @return the array of points: xpoints, ypoints
     */
/*
*/
  AbstractDataModel gCntRectModel = new AbstractDataModel() {
      public int[][] getPoints(int x, int y, Axis axes[], int points[][]) {
        return getPointArray(x,y,axes,false);
      }
      public double[] getYValues(int xi) {
        return null; // Should this be implemented?
      }
    };
  AbstractDataModel sCntRectModel = new AbstractDataModel() {
      public int[][] getPoints(int x, int y, Axis axes[], int points[][]) {
        return getPointArray(x,y,axes,true);
      }
      public double[] getYValues(int xi) {
        return null; // Should this be implemented?
      }
    };

  HistogramListener hdl = new HistogramListener() {
    public void histogramChanged(HistogramEvent e) {
System.err.println("histogramChanged");
      if (!e.isAdjusting()) {
        setAxis();
        binRectPnts[0] = null;
        selRectPnts[0] = null;
        gCntRect.setData(gCntRectModel);
        gSelRect.setData(sCntRectModel);
        repaint();
System.err.println("histogramChanged <<");
      }
    }
  };
  private MouseAdapter ma = new MouseAdapter() {
    public void mousePressed(MouseEvent e) {
      start = e.getPoint();
      current = e.getPoint();
      selecting = true;
      repaint();
    }
    public void mouseReleased(MouseEvent e) {
      selecting = false;
      current = e.getPoint();
      select();
      repaint();
    }
    public void mouseClicked(MouseEvent e) {
      start = e.getPoint();
      current = e.getPoint();
      select(current);
      repaint();
    }
    public void mouseExited(MouseEvent e) {
    }
  };

  public void select() {
    int x = Math.min(start.x, current.x);
    int y = Math.min(start.y, current.y);
    int w = Math.abs(start.x - current.x);
    int h = Math.abs(start.y - current.y);
    Rectangle r = new Rectangle(x,y,w,h);
    select(r);
  }

  public void select(Rectangle r) {
    select(gCntRect.getIndicesAt(r,calcAxes[0], calcAxes[1]));
  }

  public void select(Point p) {
    select(gCntRect.getIndicesAt(p,calcAxes[0], calcAxes[1]));
  }

  public void select(int[] indices) {
    if (indices != null) {
      hgm.selectBins(indices);
    } else {
    }
  }


  public HistogramDisplay(HistogramModel model) {
    setLayout(new BorderLayout());
    this.hgm = model;
    hgm.addHistogramListener(hdl);
    graph = new SimpleGraph();
    graph.getGraphDisplay().setOpaque(true);
    graph.getGraphDisplay().setBackground(Color.white);
    graph.getGraphDisplay().addMouseListener(ma);
    // graph.getGraphDisplay().setGridColor(new Color(220,220,220));
    // graph.showGrid(true);
    setAxis();
    graph.getAxisDisplay(BorderLayout.SOUTH).setZoomable(true);
    graph.getAxisDisplay(BorderLayout.WEST).setZoomable(true);
    gCntRect = new GraphRects();
    gCntRect.setData(gCntRectModel);
    gCntRect.setColor(Color.blue);
    graph.addGraphItem(gCntRect);
    gSelRect = new GraphRects();
    gSelRect.setData(sCntRectModel);
    gSelRect.setColor(Color.cyan);
    graph.addGraphItem(gSelRect);
    add(graph);
  }

  private void setAxis() {
    Axis xAxis = graph.getAxisDisplay(BorderLayout.SOUTH).getAxis();
    Axis yAxis = graph.getAxisDisplay(BorderLayout.WEST).getAxis();
    xAxis.setMin(-.2);
    xAxis.setMax(hgm.getBinCount());
    yAxis.setMin(0);
    yAxis.setMax(hgm.getMaxBinSize());
  }

  public synchronized int[][] getPointArray(int x, int y, Axis axes[], boolean selectCnt) {
    if(binRectPnts == null || binRectPnts[0] == null ||
       calcAxes[0] == null || calcAxes[1] == null || 
       !calcAxes[0].equals(axes[0]) || !calcAxes[1].equals(axes[1])) {
      calcPoints(x,y,axes);
    }
    return selectCnt ? selRectPnts : binRectPnts;
  }

  public synchronized void calcPoints(int x, int y, Axis axes[]) {
    int w = axes[0].getSize();
    int h = axes[1].getSize();
    int yb = y + h;
    double xoffset = .8;
    int max = hgm.getMaxBinSize();
    int cnt = hgm.getBinCount();
    int nMod = hgm.getModelCount();
    int[] dim = hgm.getDimensions();
    int[] indices = new int[dim.length];
    int[] binX = new int[cnt*2];
    int[] binY = new int[binX.length];
    int[] selY = new int[binX.length];
System.err.println("calcPoints " + cnt + " " + nMod);
    for (int i = 0,r=0; i < cnt; i++,r+=2) {
      int binCnt = hgm.getBinCount(indices);
      int selCnt = hgm.getBinSelectCount(indices);
      int xp = getOffsetX(indices, dim);
      binX[r] = x + axes[0].getIntPosition(xp);
      binX[r+1] = x + axes[0].getIntPosition(xp + xoffset);
      // Full Bin
      binY[r] = yb - axes[1].getIntPosition(0);
      binY[r+1] = yb - axes[1].getIntPosition(binCnt);
      // Selected Bin
      selY[r] = yb - axes[1].getIntPosition(0);
      selY[r+1] = yb - axes[1].getIntPosition(selCnt);
      incrIndex(indices, dim);
    }
    binRectPnts = new int[2][];
    binRectPnts[0] = binX;
    binRectPnts[1] = binY;
    selRectPnts = new int[2][];
    selRectPnts[0] = binX;
    selRectPnts[1] = selY;
    calcAxes[0] = axes[0];
    calcAxes[1] = axes[1];
  }

  private int[] incrIndex(int[] indices, int[] dim) {
    for (int i = dim.length - 1; i >= 0; i--) {
      if (indices[i] + 1 < dim[i]) {
        indices[i]++;
        break;
      } else {
        indices[i] = 0;
      }
    }
    return indices;
  }

  private int getOffsetX(int[] indices, int[] dim) {
    int width = barWidth;
    int xpos = 0;
    for (int i = indices.length - 1; i >= 0; i--) {
      xpos += indices[i] * width;
      width *= dim[i];
    }
    return xpos;
  }

}


