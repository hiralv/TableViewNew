/*
 * @(#) $RCSfile$ $Revision$ $Date$ $Name$
 *
 * Center for Computational Genomics and Bioinformatics
 * Academic Health Center, University of Minnesota
 * Copyright (c) 2000-2002. The Regents of the University of Minnesota
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * see: http://www.gnu.org/copyleft/gpl.html
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

package edu.umn.genomics.table;

import java.io.Serializable;
import java.util.*;

/*

Histogram2D
  Stacked Bars
  Layers overlapping bars
  3D rects or tubes
  3d surface altitude map

  000 001 002 003 010 011 012 013 
  label
  label
  label


BinModelAxis
  getBinCount();
  getBinSize(int binIndex);
  getBinLabel(int binIndex);
  selectBin(int binIndex);

  RangePartition	
  ValuePartition	
  RowPartition

  
BinPreference
  realvalue	#bins	min	max
  realvalue	#bins	val	incr
  categorical	#bins	
  categorical	#bins	
  partition	#bins


  +-----+
  |     |
  |     |
  min max
   label	ColumnName Cluster 

  

Partition the range:
  evenly

Classify by types:

*/

/**
 * BinModel.
 * @author       J Johnson
 * @version      %I%, %G%
 * @since        1.0
 */
public interface MutableBinModel extends BinModel {
  public void setBins(int binCount);
  public void setBins(double startingValue, double increment);
  public void setBins(double startingValue, double increment, int binCount);
  public void setBins(double value[]);
  public void setBins(PartitionIndexMap partitionMap);

  /** 
   * Return the minimum value included in this bin.
   * @param binIndex the index of bin.
   * @return the  minimum value included in this bin.
   */
  public double getBinMin(int binIndex);

  /** 
   * Return the maximum value included in this bin.
   * @param binIndex the index of bin.
   * @return the  maximum value included in this bin.
   */
  public double getBinMax(int binIndex);

  public double[] getIntervals();
  /** 
   * Return the index of the bin in which a value falls.
   * @param value the value to place in a bin.
   * @return the index of the bin into which the value would be placed.
   */
  public int getBin(double value);
  /** 
   * Return the index of the bin into which the value at the rowIndex falls.
   * @param value the rowIndex of the value to place in a bin.
   * @return the index of the bin into which the value would be placed.
   */
  public int getBin(int rowIndex);
}
